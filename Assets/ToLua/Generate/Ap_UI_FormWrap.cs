//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Ap_UI_FormWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Ap.UI.Form), typeof(Ap.UI.Control));
		L.RegFunction("Start", Start);
		L.RegFunction("OnLoad", OnLoad);
		L.RegFunction("OnClose", OnClose);
		L.RegFunction("Changed", Changed);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("LayerIndex", get_LayerIndex, set_LayerIndex);
		L.RegVar("Load", get_Load, set_Load);
		L.RegVar("Close", get_Close, set_Close);
		L.RegVar("FocusChanged", get_FocusChanged, set_FocusChanged);
		L.RegVar("IsFull", get_IsFull, set_IsFull);
		L.RegVar("Visible", get_Visible, set_Visible);
		L.RegVar("Focus", get_Focus, set_Focus);
		L.RegFunction("FocusChangedHandle", Ap_UI_Form_FocusChangedHandle);
		L.RegFunction("CloseHandle", Ap_UI_Form_CloseHandle);
		L.RegFunction("LoadHandle", Ap_UI_Form_LoadHandle);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)ToLua.CheckObject<Ap.UI.Form>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)ToLua.CheckObject<Ap.UI.Form>(L, 1);
			obj.OnLoad();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)ToLua.CheckObject<Ap.UI.Form>(L, 1);
			obj.OnClose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Changed(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Ap.UI.Form obj = (Ap.UI.Form)ToLua.CheckObject<Ap.UI.Form>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.Changed(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LayerIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			int ret = obj.LayerIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LayerIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Load(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.LoadHandle ret = obj.Load;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Load on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Close(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.CloseHandle ret = obj.Close;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Close on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FocusChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.FocusChangedHandle ret = obj.FocusChanged;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FocusChanged on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool ret = obj.IsFull;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool ret = obj.Visible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Focus(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool ret = obj.Focus;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Focus on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LayerIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LayerIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LayerIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Load(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.LoadHandle arg0 = (Ap.UI.Form.LoadHandle)ToLua.CheckDelegate<Ap.UI.Form.LoadHandle>(L, 2);
			obj.Load = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Load on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Close(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.CloseHandle arg0 = (Ap.UI.Form.CloseHandle)ToLua.CheckDelegate<Ap.UI.Form.CloseHandle>(L, 2);
			obj.Close = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Close on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FocusChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			Ap.UI.Form.FocusChangedHandle arg0 = (Ap.UI.Form.FocusChangedHandle)ToLua.CheckDelegate<Ap.UI.Form.FocusChangedHandle>(L, 2);
			obj.FocusChanged = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FocusChanged on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsFull(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsFull = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFull on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Visible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Visible = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Visible on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Focus(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Ap.UI.Form obj = (Ap.UI.Form)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Focus = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Focus on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Ap_UI_Form_FocusChangedHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Ap.UI.Form.FocusChangedHandle>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Ap.UI.Form.FocusChangedHandle>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Ap_UI_Form_CloseHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Ap.UI.Form.CloseHandle>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Ap.UI.Form.CloseHandle>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Ap_UI_Form_LoadHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Ap.UI.Form.LoadHandle>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Ap.UI.Form.LoadHandle>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

